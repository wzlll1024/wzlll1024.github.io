<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/04/17/mysql/"/>
      <url>/2022/04/17/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>关系型数据库</p><p>客户端与服务端用socket连接</p><h3 id="字符串数据类型"><a href="#字符串数据类型" class="headerlink" title="字符串数据类型"></a>字符串数据类型</h3><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>char(n)</td><td>固定长度，最多255个字符</td></tr><tr><td>varchar(n)</td><td>可变长度，最多65535个字符</td></tr><tr><td>tinytext</td><td>可变长度，最多255个字符</td></tr><tr><td>text</td><td>可变长度，最多65535个字符</td></tr><tr><td>mediumtext</td><td>可变长度，最多2的24次方-1个字符</td></tr><tr><td>longtext</td><td>可变长度，最多2的32次方-1个字符</td></tr></tbody></table><h4 id="char和varchar的区别"><a href="#char和varchar的区别" class="headerlink" title="char和varchar的区别"></a>char和varchar的区别</h4><ul><li>char(n)无论实际value多大都会占用n个<strong>字符</strong>空间（n是代表字符个数而不是字节数：插入n个中文，实际为n*3个字节）</li><li>varchar则为占用<strong>实际空间＋1</strong>的空间（实际空间＋1&lt;&#x3D;n）</li><li>char上限255字节，vachar65535字节</li><li>char存储时会截断尾部空格，vachar，text不会</li><li>varchar会使用1到3个字节来储存长度，text不会</li></ul><h3 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h3><p><strong>日期和时间数据类型</strong></p><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>date</td><td>3字节，日期，格式：2014-09-18</td></tr><tr><td>time</td><td>3字节，时间，格式：08:42:30</td></tr><tr><td>datetime</td><td>8字节，日期时间，格式：2014-09-18 08:42:30</td></tr><tr><td>timestamp</td><td>4字节，自动存储记录修改的时间</td></tr><tr><td>year</td><td>1字节，年份</td></tr></tbody></table><p><strong>整型</strong></p><table><thead><tr><th>MySQL数据类型</th><th>含义（有符号）</th></tr></thead><tbody><tr><td>tinyint</td><td>1字节，范围（-128~127）</td></tr><tr><td>smallint</td><td>2字节，范围（-32768~32767）</td></tr><tr><td>mediumint</td><td>3字节，范围（-8388608~8388607）</td></tr><tr><td>int</td><td>4字节，范围（-2147483648~2147483647）</td></tr><tr><td>bigint</td><td>8字节，范围（+-9.22*10的18次方）</td></tr></tbody></table><p>上面定义的都是有符号的，当然了，也可以加上unsigned关键字，定义成无符号的类型，那么对应的取值范围就要翻翻了，比如：</p><p>tinyint unsigned的取值范围为0~255。</p><p><strong>浮点型</strong></p><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>float(m, d)</td><td>4字节，单精度浮点型，m总个数，d小数位</td></tr><tr><td>double(m, d)</td><td>8字节，双精度浮点型，m总个数，d小数位</td></tr><tr><td>decimal(m, d)</td><td>decimal是存储为字符串的浮点数</td></tr></tbody></table><p>我在MySQL中建立了一个表，有一列为float(5, 3)；做了以下试验：</p><p>1.插入123.45678，最后查询得到的结果为99.999； 2.插入123.456，最后查询结果为99.999； 3.插入12.34567，最后查询结果为12.346；</p><p>所以，在使用浮点型的时候，还是要注意陷阱的，要以插入数据库中的实际结果为准。</p><p><strong>其它类型</strong></p><p>1.enum(“member1″, “member2″, … “member65535″) enum数据类型就是定义了一种枚举，最多包含65535个不同的成员。当定义了一个enum的列时，该列的值限制为列定义中声明的值。如果列声明包含NULL属性，则NULL将被认为是一个有效值，并且是默认值。如果声明了NOT NULL，则列表的第一个成员是默认值。</p><p>2.set(“member”, “member2″, … “member64″) set数据类型为指定一组预定义值中的零个或多个值提供了一种方法，这组值最多包括64个成员。值的选择限制为列定义中声明的值。</p><h3 id="对数据库操作（增删改查）"><a href="#对数据库操作（增删改查）" class="headerlink" title="对数据库操作（增删改查）"></a>对数据库操作（增删改查）</h3><p>查看所有数据库：SHOW DATABASES;</p><p>使用数据库：USE 数据库名；</p><p>创建数据库指定编码：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> test <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf<span class="token operator">-</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除数据库：DROP DATABASE 数据库名；</p><p>user test；切换数据库；</p><h4 id="对表结构操作"><a href="#对表结构操作" class="headerlink" title="对表结构操作"></a>对表结构操作</h4><p>创建表：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>字段名<span class="token number">1</span> 类型 <span class="token punctuation">(</span>宽度<span class="token punctuation">)</span> 约束条件<span class="token punctuation">,</span>字段名<span class="token number">2</span> 类型<span class="token punctuation">(</span>宽度<span class="token punctuation">)</span> 约束条件<span class="token punctuation">,</span>字段名<span class="token number">3</span> 类型<span class="token punctuation">(</span>宽度<span class="token punctuation">)</span> 约束条件<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看当前库所有表：SHOW TABLES;</p><p>查看表结构：DESC 表；</p><p>删除：DROP table 表；</p><ul><li><p>修改表之添加列:<code>ALTER TABLE 表名 add (列名 列类型，...，列名 列类型);</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">add</span> <span class="token punctuation">(</span>address <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>hobby <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1</p></li><li><p>修改表之修改列类型:<code>ALTER TABLE 表名 MODIFY 列名 列的新类型;</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">MODIFY</span> hobby <span class="token keyword">int</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1</p></li><li><p>修改表之列名称列类型一起修改:<code>ALTER TABLE 表名 CHANGE 原列名 新列名 列名类型;</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student CHANGE hobby newHobby <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1</p></li><li><p>修改表之删除列:<code>ALTER TABLE 表名 DROP 列名;</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">drop</span> newHobby；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1</p></li><li><p>修改表之修改表名:<code>ALTER TABLE 表名 RENAME TO 新表名</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">RENAME</span> <span class="token keyword">to</span> stu<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="对数据操作（DML）"><a href="#对数据操作（DML）" class="headerlink" title="对数据操作（DML）"></a>对数据操作（DML）</h3><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token punctuation">(</span>列名<span class="token number">1</span>，列名<span class="token number">2</span>，列名<span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>列值<span class="token number">1</span>，列值<span class="token number">2</span>，列值<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span>  stu <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gander<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'李华'</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>字符串类型必须用单引号</strong></p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> stu <span class="token keyword">set</span> age <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">update</span> stu <span class="token keyword">set</span> age <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">'刘露'</span><span class="token punctuation">;</span><span class="token keyword">update</span> stu <span class="token keyword">set</span> age <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">'刘露'</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//加条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改(某行或者多行记录的)列的指定值:<code>update 表名 set 列名1=列值1 where 列名2=列值2 or 列名3=列值3;</code></p><p>运算符:<code>=、!=、&lt;&gt;、&lt;、&gt;、&gt;=、&lt;=、between...and、in(…)、is null、not、or、and</code>，其中in(…)的用法表示集合。例如:<code>update 表名 set 列名1=列值1 where 列名2=列值2 or 列名2=列值22</code>用in(…)写成<code>update 表名 set 列名1=列值1 where 列名2 in(列值2，列值3)</code></p><h4 id="删除（整行）"><a href="#删除（整行）" class="headerlink" title="删除（整行）"></a>删除（整行）</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token punctuation">(</span><span class="token keyword">where</span> 条件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="建表约束"><a href="#建表约束" class="headerlink" title="建表约束"></a>建表约束</h3><table><thead><tr><th>约束名称</th><th>描述</th></tr></thead><tbody><tr><td>NOT NULL</td><td>非空约束</td></tr><tr><td>UNIQUE</td><td>唯一约束，取值不允许重复,</td></tr><tr><td>PRIMARY KEY</td><td>主键约束（主关键字），自带非空、唯一、索引</td></tr><tr><td>FOREIGN KEY</td><td>外键约束（外关键字）</td></tr><tr><td>DEFAULT</td><td>默认值（缺省值）</td></tr></tbody></table><h4 id="PRIMARY-KEY-约束"><a href="#PRIMARY-KEY-约束" class="headerlink" title="PRIMARY KEY 约束"></a>PRIMARY KEY 约束</h4><p>主键只有一个，但可以多个字段形成联合主键</p><p><strong>单个字段做主键</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">EXISTS</span> author<span class="token punctuation">;</span><span class="token comment">//创建表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> author<span class="token punctuation">(</span>    aut_id <span class="token keyword">int</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>           aut_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     country <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token operator">or</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> author<span class="token punctuation">(</span>    aut_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           aut_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     country <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>aut_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多个字段</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">EXISTS</span> author<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> author<span class="token punctuation">(</span>    aut_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>           aut_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     country <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>aut_id<span class="token punctuation">,</span>country<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="FOREIGN-KEY约束"><a href="#FOREIGN-KEY约束" class="headerlink" title="FOREIGN KEY约束"></a>FOREIGN KEY约束</h4><blockquote><ul><li>外键可以建立多个，多个外键接着写就行了</li><li>外键会产生的效果</li><li>1、删除表时，如果不删除引用外键的表，被引用的表不能直接删除</li><li>2、外键的值必须来源于引用的表的主键字段</li></ul></blockquote><h4 id="AUTO-INCREMENT约束"><a href="#AUTO-INCREMENT约束" class="headerlink" title="AUTO_INCREMENT约束"></a>AUTO_INCREMENT约束</h4><ul><li>用于为一个表中记录自动生成ID功能</li><li>可在建表时可用“AUTO_INCREMENT&#x3D;n”选项来指定一个自增的初始值。</li><li>可用alter table table_name AUTO_INCREMENT&#x3D;n命令来重设自增的起始值。</li></ul><h3 id="数据查询语句"><a href="#数据查询语句" class="headerlink" title="数据查询语句"></a>数据查询语句</h3><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><h4 id="基本查询-后缀都是统一为from-表名"><a href="#基本查询-后缀都是统一为from-表名" class="headerlink" title="基本查询(后缀都是统一为from 表名)"></a>基本查询(后缀都是统一为from 表名)</h4><p>（1）查询所有列:<code>select * from 表名;</code>其中＊表示查询所有列，而不是所有行的意思。</p><p>（2）查询指定列:<code>select 列1，列2，列n from 表名；</code></p><p>（3）完全重复的记录只显示一次:在查询的列之前添加distinct</p><p>（4）列运算</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">a<span class="token punctuation">.</span>数量类型的列可以做加、减、乘、除:<span class="token identifier"><span class="token punctuation">`</span>SELECT sal*5 from 表名；<span class="token punctuation">`</span></span>说明:<span class="token number">1.</span>遇到<span class="token boolean">null</span>加任何值都等于<span class="token boolean">null</span>的情况，需要用到ifnull<span class="token punctuation">(</span><span class="token punctuation">)</span>函数。<span class="token number">2.</span>将字符串做加减乘除运算，会把字符串当作<span class="token number">0</span>。b<span class="token punctuation">.</span>字符串累类型可以做连续运算<span class="token punctuation">(</span>需要用到concat<span class="token punctuation">(</span><span class="token punctuation">)</span>函数<span class="token punctuation">)</span>:<span class="token identifier"><span class="token punctuation">`</span>select concat(列名1，列名2) from 表名;<span class="token punctuation">`</span></span>其中列名的类型要为字符串。c<span class="token punctuation">.</span> 给列名起别名:<span class="token identifier"><span class="token punctuation">`</span>select 列名1 (as) 别名1,列名2 (as) 别名2 from 表名；<span class="token punctuation">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5）条件控制</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">a<span class="token punctuation">.</span>条件查询。在后面添加<span class="token keyword">where</span>指定条件:<span class="token identifier"><span class="token punctuation">`</span>select * from 表名 where 列名＝指定值;<span class="token punctuation">`</span></span>b<span class="token punctuation">.</span>模糊查询：当你想查询所有姓张的记录。用到关键字<span class="token operator">like</span>。<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 列名 <span class="token operator">like</span> ‘张_’<span class="token punctuation">;</span><span class="token punctuation">(</span>_代表匹配任意一个字符，％代表匹配<span class="token number">0</span>～n个任意字符<span class="token punctuation">)</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、排序-所谓升序和降序都是从上往下排列"><a href="#2、排序-所谓升序和降序都是从上往下排列" class="headerlink" title="2、排序(所谓升序和降序都是从上往下排列)"></a>2、排序(所谓升序和降序都是从上往下排列)</h4><ul><li>1.升序:<code>select * form 表名 order by 列名 (ASC );</code> ()里面的内容为缺省值；</li><li>2.降序:<code>select * from 表名 order by 列名 DESC;</code></li><li>3.使用多列作为排序条件： 当第一列排序条件相同时，根据第二列排序条件排序(当第二列依旧相同时可视情况根据第三例条件排序)。eg:<code>select * from 表名 order by 列名1 ASC, 列名2 DESC;</code>意思是当列名1的值相同时按照列名2的值降序排。</li></ul><h4 id="3、聚合函数"><a href="#3、聚合函数" class="headerlink" title="3、聚合函数"></a>3、聚合函数</h4><ul><li>1.count:<code>select count(列名) from 表名；</code>，记录行数。</li><li>2.max:<code>select max(列名) from 表名；</code>，列中最大值。</li><li>3.min:<code>select min(列名) from 表名；</code>，列中最小值。</li><li>4.sum:<code>select sum(列名) from 表名；</code>，求列的总值，null 和字符串默认为0。</li><li>5.avg:<code>select avg(列名) from 表名;</code>，一列的平均值。</li></ul><h4 id="4、分组查询"><a href="#4、分组查询" class="headerlink" title="4、分组查询"></a>4、分组查询</h4><p>分组查询的信息都是组的信息，不能查到个人的信息，其中查询组的信息是通过聚合函数得到的。</p><p>语法：<code>select 分组列名，聚合函数1,聚合函数2 from 表名 group by 该分组列名；</code>其中分组列名需要的条件是该列名中有重复的信息。</p><p>查询的结果只能为：作为分组条件的列和聚合函数；查出的信息都是组的信息。</p><p>分组查询前，还可以通过关键字where先把满足条件的人分出来，再分组。语法为:<code>select 分组列，聚合函数 from 表名 where 条件 group by 分组列；</code></p><p>分组查询后，也可以通过关键字having把组信息中满足条件的组再细分出来。语法为：<code>select 分组列，聚合函数 from 表名 where 条件 group by 分组列 having 聚合函数或列名(条件)；</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> gander<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> avg_age<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> sum_age <span class="token keyword">from</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gander <span class="token keyword">HAVING</span>  gander <span class="token operator">=</span> <span class="token string">'男'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5、LIMIT子句-mysql中独有的语法"><a href="#5、LIMIT子句-mysql中独有的语法" class="headerlink" title="5、LIMIT子句(mysql中独有的语法)"></a>5、LIMIT子句(mysql中独有的语法)</h4><p>LIMIT用来限定查询结果的起始行，以及总行数。</p><p>例如：<code>select * from 表名 limit 4，3；</code>表示起始行为第5行，一共查询3行记录。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--如果一个参数 说明从开始查找三条记录</span><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gander <span class="token keyword">FROM</span> student <span class="token keyword">limit</span> <span class="token number">3</span><span class="token comment">--如果两个参数 说明从第三行起（不算），向后查三条记录</span><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gander <span class="token keyword">FROM</span> student <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>内连接查询操作只列出与连接条件匹配的数据行，使用<strong>INNER JOIN</strong>或者直接使用<strong>JOIN</strong> 进行连接。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">普通的多表查，课内连接接通相同<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token punctuation">,</span> course c <span class="token keyword">where</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>t_id   （这样会先生成笛卡尔积，效率可能略低）<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">JOIN</span> course c <span class="token keyword">on</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>t_id <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">inner</span> <span class="token keyword">JOIN</span> course c <span class="token keyword">on</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>t_id 结果：只有满足条件的会显示，<span class="token number">5</span>号老师没课程，<span class="token number">5</span>号课程没老师都不会显示<span class="token number">1</span>王宝强<span class="token number">1</span>数学<span class="token number">1</span><span class="token number">2</span>贾宝玉<span class="token number">2</span>语文<span class="token number">2</span><span class="token number">3</span>温迪<span class="token number">3</span>c<span class="token operator">+</span><span class="token operator">+</span><span class="token number">3</span><span class="token number">4</span>路人甲<span class="token number">4</span>java<span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>外连接<strong>不只</strong>列出与连接条件相匹配的行，而且还加上左表(左外连接时)或右表(右外连接时)或两个表(全外连接时)中所有符合搜索条件的数据行。</p><h5 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h5><p>根据条件，用右表（B）匹配左表（A），能匹配，正确保留，<strong>不能匹配其他表的字段都置空 Null</strong>。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">setect <span class="token operator">*</span> <span class="token keyword">from</span> table_a a <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> table_b b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>idsetect <span class="token operator">*</span> <span class="token keyword">from</span> table_a a <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> table_b b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h5><p>根据条件，用左表（A）匹配右表（B），能匹配，正确保留，<strong>不能匹配其他表的字段都置空 Null</strong>。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">setect <span class="token operator">*</span> <span class="token keyword">from</span> table_a a <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> table_b b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>idsetect <span class="token operator">*</span> <span class="token keyword">from</span> table_a a <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> table_b b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h5><p>目前 MySQL 不支持此种方式，可以用其他方式替代解决，在此不展开。</p><p>理论上是根据条件找到表 A 和 表 B 的数据的交集，再加上左右表的数据集</p><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><h5 id="where型子查询"><a href="#where型子查询" class="headerlink" title="where型子查询"></a>where型子查询</h5><p>查询结果作为条件</p><p>例子：查询有<strong>一门学科分数大于八十分</strong>的<strong>学生信息</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">DISTINCT</span> s_id <span class="token keyword">from</span> <span class="token keyword">where</span> score <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>where 型子查询，如果是 where 列 &#x3D;（内层 sql） 则内层 sql 返回的必须是单行单列，单个值。</li><li>where 型子查询，如果是 where 列 in（内层 sql） 则内层 sql 返回的必须是单列，可以多行。</li></ul><h5 id="from-型子查询"><a href="#from-型子查询" class="headerlink" title="from 型子查询"></a>from 型子查询</h5><p><strong>查询结果可以在结构上当作表看</strong>，座椅可以当成临时表再吃查询</p><p>取排名<strong>数学成绩</strong>前五名的学生，正序排列。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>score<span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> cname <span class="token keyword">from</span> student s <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> scores e<span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>s_id <span class="token keyword">left</span> <span class="token keyword">JOIN</span> course c <span class="token keyword">on</span> e<span class="token punctuation">.</span>c_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token keyword">where</span> c<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">'数学'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> e<span class="token punctuation">.</span>score <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">5</span> <span class="token punctuation">)</span> t <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> t<span class="token punctuation">.</span>score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="MySQL常用函数介绍"><a href="#MySQL常用函数介绍" class="headerlink" title="MySQL常用函数介绍"></a>MySQL常用函数介绍</h3><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><ul><li>COUNT(col) 统计查询结果的行数</li><li>MIN(col) 查询指定列的最小值</li><li>MAX(col) 查询指定列的最大值</li><li>SUM(col) 求和，返回指定列的总和</li><li>AVG(col) 求平均值，返回指定列数据的平均值</li></ul><h4 id="数值型函数"><a href="#数值型函数" class="headerlink" title="数值型函数"></a>数值型函数</h4><ul><li>CEILING(x) 返回大于x的最小整数值，向上取整</li><li>FLOOR(x) 返回小于x的最大整数值，向下取整</li><li>ROUND(x,y) 返回参数x的四舍五入的有y位小数的值 四舍五入</li><li>TRUNCATE(x,y) 返回数字x截短为y位小数的结果</li><li>PI() 返回pi的值（圆周率）</li><li>RAND() 返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值</li></ul><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><ul><li>LENGTH(s) 计算字符串长度函数，返回字符串的字节长度</li><li>CONCAT(s1,s2…,sn) 合并字符串函数，返回结果为连接参数产生的字符串，参数可以是一个或多个</li><li>LOWER(str) 将字符串中的字母转换为小写</li><li>UPPER(str) 将字符串中的字母转换为大写</li><li>LEFT(str,x) 返回字符串str中最左边的x个字符</li><li>RIGHT(str,x) 返回字符串str中最右边的x个字符</li><li>TRIM(str) 删除字符串左右两侧的空格</li><li>REPLACE 字符串替换函数，返回替换后的新字符串 REPLACE(name,’白’,’黑’)</li><li>SUBSTRING 截取字符串，返回从指定位置开始的指定长度的字符换</li><li>REVERSE(str) 返回颠倒字符串str的结果</li></ul><h4 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h4><ul><li>CURDATE 和 CURRENT_DATE 两个函数作用相同，返回当前系统的日期值</li><li>CURTIME 和 CURRENT_TIME 两个函数作用相同，返回当前系统的时间值</li><li><strong>NOW</strong> 和 SYSDATE 两个函数作用相同，返回当前系统的日期和时间值</li><li>UNIX_TIMESTAMP 获取UNIX时间戳函数，返回一个以 UNIX 时间戳为基础的无符号整数</li><li><strong>FROM_UNIXTIME 将 UNIX 时间戳转换为时间格式，与UNIX_TIMESTAMP互为反函数</strong></li><li>MONTH 获取指定日期中的月份</li><li>MONTHNAME 获取指定日期中的月份英文名称</li><li>DAYNAME 获取指定曰期对应的星期几的英文名称</li><li>DAYOFWEEK 获取指定日期对应的一周的索引位置值</li><li>WEEK 获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</li><li>DAYOFYEAR 获取指定曰期是一年中的第几天，返回值范围是1~366</li><li>DAYOFMONTH 获取指定日期是一个月中是第几天，返回值范围是1~31</li><li>YEAR 获取年份，返回值范围是 1970〜2069</li><li>DATE_ADD 和 ADDDATE 两个函数功能相同，都是向日期添加指定的时间间隔</li><li>DATE_SUB 和 SUBDATE 两个函数功能相同，都是向日期减去指定的时间间隔</li><li>ADDTIME 时间加法运算，在原始时间上添加指定的时间</li><li>SUBTIME 时间减法运算，在原始时间上减去指定的时间</li><li>DATEDIFF 获取两个日期之间间隔，返回参数 1 减去参数 2 的值</li><li><strong>DATE_FORMAT 格式化指定的日期，根据参数返回指定格式的值</strong></li></ul><h4 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h4><p>用来实现SQL的条件逻辑，允许开发者将一些应用程序业务逻辑转换到数据库后台</p><ul><li>IF(test,t,f) 如果test是真，返回t；否则返回f</li><li>IFNULL(arg1,arg2) 如果arg1不是空，返回arg1，否则返回arg2</li><li>NULLIF(arg1,arg2) 如果arg1&#x3D;arg2返回NULL；否则返回arg1</li><li>CASE WHEN[test1] THEN [result1]…ELSE [default] END 如果testN是真，则返回resultN，否则返回default</li><li>CASE [test] WHEN[val1] THEN [result]…ELSE [default]END 如果test和valN相等，则返回resultN，否则返回default</li><li>CASE 列名</li><li>WHEN condition THEN result</li></ul><h4 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h4><ul><li><strong>MD5()</strong> 计算字符串str的MD5校验和</li></ul><h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><ul><li>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>上加以”固化”<strong>，而持久化的实现过程大多通过各种关系数据库来完成</strong>。</li><li>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="mysql数据结构类型"><a href="#mysql数据结构类型" class="headerlink" title="mysql数据结构类型"></a>mysql数据结构类型</h3><h4 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h4><p><img src="D:/typora/jpg/image-20220417192022024.png" alt="image-20220417192022024"></p><ul><li>多路平衡搜索树</li><li>允许每个节点有更多的子节点</li><li>所有键值分布在整棵树中</li><li>任何关键字出现且只出现一个节点中</li><li>搜索可能在非叶子节点结束</li><li>关键字全集做一次查找，性能直逼二分查找</li></ul><h4 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h4><p><img src="D:/typora/jpg/image-20220417191937959.png" alt="image-20220417191937959"></p><p>默认主键。无主键则为唯一索引，再无则用行号</p><p><strong>与B-不同之处：</strong></p><p>所有关键字在叶子节点出现，非叶子节点不存储data</p><p>为所有叶子节点增加了一个链指针</p><h4 id="为何使用B-树"><a href="#为何使用B-树" class="headerlink" title="为何使用B+树"></a>为何使用B+树</h4><ul><li>没有数据就可以存储更多id，节点范围更大更精确，io效率更高</li><li>增加了链指针，加强了区间访问性（Mysql是一种关系型数据库，区间访问是常见的一种情况）</li></ul><h3 id="为什么要使用索引"><a href="#为什么要使用索引" class="headerlink" title="为什么要使用索引"></a>为什么要使用索引</h3><p>1、mysql的数据是存在磁盘上的，磁盘的读取速度是比较慢的使用主键的读取方式会很快，当数据来那个太大非主键的字段查询是会特别耗时。一条语句可能查询10秒以上</p><p>2、建立在主键上的B+树结构可以快速查询出数据</p><h3 id="有了索引怎么查询"><a href="#有了索引怎么查询" class="headerlink" title="有了索引怎么查询"></a>有了索引怎么查询</h3><ul><li>从索引里自上而下查询</li><li>走到叶子节点查询到id</li><li>根据id去聚簇索引中查找真正的数据，这个过程叫做<code>回表</code></li><li>如果你要的数据索引都有了不需要回表，就叫<code>索引覆盖</code>。</li></ul><h5 id="普通索引：idx-字段名"><a href="#普通索引：idx-字段名" class="headerlink" title="普通索引：idx_字段名"></a>普通索引：idx_字段名</h5><h5 id="唯一索引：ux-字段名"><a href="#唯一索引：ux-字段名" class="headerlink" title="唯一索引：ux_字段名"></a>唯一索引：ux_字段名</h5><h3 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h3><p><img src="/../../../typora/jpg/image-20220417192603193.png" alt="image-20220417192603193"></p><p><strong>聚簇索引具有唯一性</strong>，由于聚簇索引是将数据跟索引结构放到一块，因此一个表仅有一个聚簇索引。</p><p><strong>表中行的物理顺序和索引中行的物理顺序是相同的</strong>，在创建任何非聚簇索引之前创建聚簇索引，这是因为聚簇索引改变了表中行的物理顺序，数据行 按照一定的顺序排列，并且自动维护这个顺序；</p><p><strong>聚簇索引默认是主键</strong>，如果表中没有定义主键，InnoDB 会选择一个唯一且非空的索引代替。如果没有这样的索引，InnoDB 会隐式定义一个主键（类似oracle中的RowId）来作为聚簇索引。如果已经设置了主键为聚簇索引又希望再单独设置聚簇索引，必须先删除主键，然后添加我们想要的聚簇索引，最后恢复设置主键即可。</p><p><strong>MyISAM使用的是非聚簇索引，</strong>非聚簇索引的两棵B+树看上去没什么不同，节点的结构完全一致只是存储的内容不同而已，主键索引B+树的节点存储了主键，辅助键索引B+树存储了辅助键。表数据存储在独立的地方，这两颗B+树的叶子节点都使用一个地址指向真正的表数据，对于表数据来说，这两个键没有任何差别。由于索引树是独立的，通过辅助键检索无需访问主键的索引树。</p><h4 id="（1）使用聚簇索引的优势："><a href="#（1）使用聚簇索引的优势：" class="headerlink" title="（1）使用聚簇索引的优势："></a>（1）使用聚簇索引的优势：</h4><p>1.由于行数据和聚簇索引的叶子节点存储在一起，同一页中会有多条行数据，访问同一数据页不同行记录时，已经把页加载到了Buffer中（缓存器），再次访问时，会在内存中完成访问，不必访问磁盘。这样主键和行数据是一起被载入内存的，找到叶子节点就可以立刻将行数据返回了，如果按照主键Id来组织数据，获得数据更快。</p><p>2.辅助索引的叶子节点，存储主键值，而不是数据的存放地址。好处是当行数据放生变化时，索引树的节点也需要分裂变化；或者是我们需要查找的数据，在上一次IO读写的缓存中没有，需要发生一次新的IO操作时，可以避免对辅助索引的维护工作，只需要维护聚簇索引树就好了。另一个好处是，因为辅助索引存放的是主键值，减少了辅助索引占用的存储空间大小。</p><p>注：我们知道一次io读写，可以获取到16K大小的资源，我们称之为读取到的数据区域为Page。而我们的B树，B+树的索引结构，叶子节点上存放好多个关键字（索引值）和对应的数据，都会在一次IO操作中被读取到缓存中，所以在访问同一个页中的不同记录时，会在内存里操作，而不用再次进行IO操作了。除非发生了页的分裂，即要查询的行数据不在上次IO操作的换村里，才会触发新的IO操作。</p><p>3.因为MyISAM的主索引并非聚簇索引，那么他的数据的物理地址必然是凌乱的，拿到这些物理地址，按照合适的算法进行I&#x2F;O读取，于是开始不停的寻道不停的旋转。聚簇索引则只需一次I&#x2F;O。（强烈的对比）</p><p>4.不过，如果涉及到大数据量的排序、全表扫描、count之类的操作的话，还是MyISAM占优势些，因为索引所占空间小，这些操作是需要在内存中完成的。</p><h4 id="（2）主键建议使用自增id"><a href="#（2）主键建议使用自增id" class="headerlink" title="（2）主键建议使用自增id"></a>（2）主键建议使用自增id</h4><pre><code>     当使用主键为聚簇索引时，主键最好不要使用uuid，因为uuid的值太过离散，不适合排序且可能出线新增加记录的uuid，会插入在索引树中间的位置，导致索引树调整复杂度变大，消耗更多的时间和资源。</code></pre><p>聚簇索引的数据的物理存放顺序与索引顺序是一致的，即：只要索引是相邻的，那么对应的数据一定也是相邻地存放在磁盘上的。如果主键不是自增id，那么可以想 象，它会干些什么，不断地调整数据的物理地址、分页，当然也有其他一些措施来减少这些操作，但却无法彻底避免。但，如果是自增的，那就简单了，它只需要一 页一页地写，索引结构相对紧凑，磁盘碎片少，效率也高。</p><h3 id="主键索引-（primary-key）"><a href="#主键索引-（primary-key）" class="headerlink" title="主键索引 （primary key）"></a>主键索引 （primary key）</h3><p>​也简称主键。它可以提高查询效率，并提供唯一性约束。一张表中只能有一个主键。被标志为自动增长的字段一定是主键，但主键不一定是自动增长。一般把主键定义在无意义的字段上（如：编号），主键的数据类型最好是数值。</p><h3 id="普通索引-（常规索引）-normal"><a href="#普通索引-（常规索引）-normal" class="headerlink" title="普通索引 （常规索引）(normal)"></a>普通索引 （常规索引）(normal)</h3><p>普普通通的索引，没有什么特殊要求</p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><ul><li>主键是一种约束，唯一索引是一种索引，两者在本质上是不同的。</li><li>主键创建后一定包含一个唯一性索引，唯一性索引并不一定就是主键。</li><li>唯一性索引列允许空值，而主键列不允许为空值。</li><li>主键列在创建时，已经默认为非空值 + 唯一索引了。</li><li>主键可以被其他表引用为外键，而唯一索引不能。</li><li>一个表最多只能创建一个主键，但可以创建多个唯一索引。</li><li>主键更适合那些不容易更改的唯一标识，如自动递增列、身份证号等。</li></ul><h3 id="全文索引（FULLTEXT）"><a href="#全文索引（FULLTEXT）" class="headerlink" title="全文索引（FULLTEXT）"></a>全文索引（FULLTEXT）</h3><p><strong>有更好的替代品</strong> <strong>ElacticSearch</strong></p><ol><li>使用全文索引前，搞清楚版本支持情况；</li><li>全文索引比 like + % 快 N 倍，但是可能存在精度问题；</li><li>如果需要全文索引的是大量数据，建议先添加数据，再创建索引；</li><li>对于中文，可以使用 MySQL 5.7.6 之后的版本，或者第三方插件。</li></ol><h3 id="空间索引（SPATIAL）"><a href="#空间索引（SPATIAL）" class="headerlink" title="空间索引（SPATIAL）"></a>空间索引（SPATIAL）</h3><p>地理位置领域使用的一种索引</p><h3 id="复合索引（联合索引）重要"><a href="#复合索引（联合索引）重要" class="headerlink" title="复合索引（联合索引）重要"></a>复合索引（联合索引）重要</h3><p>索引的组合使用效率低于复合索引</p><p>按照 A列 B列 C列进行查询时，通常的做法是建立一个由三个列共同组成的复合索引而不是对每一个列建立普通索引。</p><blockquote><p>为什么要使用联合索引</p></blockquote><p><strong>减少开销。</strong>建一个联合索引<code>(Gid,Cid,SId)</code>，实际相当于建了<code>(Gid)、(Gid,Cid)、(Gid,Cid,SId)</code>三个索引。每多一个索引，都会增加写操作的开销和磁盘空间的开销。对于大量数据的表，使用联合索引会大大的减少开销！</p><p><strong>覆盖索引。</strong>对联合索引<code>(Gid,Cid,SId)</code>，如果有如下的sql: select <code>Gid,Cid,SId</code> from student where <code>Gid</code>&#x3D;1 and <code>Cid</code>&#x3D;2。那么MySQL可以直接通过遍历索引取得数据，而无需回表，这减少了很多的随机io操作。减少io操作，特别的随机io其实是dba主要的优化策略。所以，在真正的实际应用中，覆盖索引是主要的提升性能的优化手段之一。</p><p><strong>效率高。</strong>索引列越多，通过索引筛选出的数据越少。有1000W条数据的表，有如下sql:select from table where <code>Gid</code>&#x3D;1 and <code>Cid</code>&#x3D;2 and <code>SId</code>&#x3D;3,假设假设每个条件可以筛选出10%的数据，如果只有单值索引，那么通过该索引能筛选出1000W10%&#x3D;100w条数据，然后再回表从100w条数据中找到符合<code>Gid</code>&#x3D;2 and <code>Cid</code>&#x3D; 3的数据，然后再排序，再分页；如果是联合索引，通过索引筛选出1000w10% 10% *10%&#x3D;1w，效率提升可想而知！</p><p><strong>缺点。</strong>联合索引越多，索引列越多，则创建的索引越多，索引都是存储在磁盘里的，通过索引算法(Btree代表索引算法使用二叉树的形式来做索引的)来查找数据，的确可以极大的提高查询效率，但是与此同时增删改的同时，需要更新索引，同样是需要花时间的，并且索引所占的磁盘空间也不小。</p><p><strong>建议。</strong>单表尽可能不要超过一个联合索引，单个联合索引不超过3个</p><blockquote><p>联合索引的创建注意事项</p></blockquote><p>1.<code>最左前缀匹配原则</code>，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a &#x3D; 1 and b &#x3D; 2 and c &gt; 3 and d &#x3D; 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>2.&#x3D;和in可以乱序，比如a &#x3D; 1 and b &#x3D; 2 and c &#x3D; 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。</p><p>把范围查询的字段放在后边</p><blockquote><p>创建联合索引，就是括号里多了几个列</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">alert <span class="token keyword">table</span> test <span class="token keyword">add</span> idx_clo1_col2 <span class="token keyword">table</span> <span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>a3<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> idx_clo1_col2 <span class="token keyword">on</span> <span class="token keyword">table</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="hash索引"><a href="#hash索引" class="headerlink" title="hash索引"></a>hash索引</h3><ul><li>hash相信大家应该都很熟悉，hash是一种key-value形式的数据结构。实现一般是数组+链表的结构，通过hash函数计算出key在数组中的位置，然后如果出现hash冲突就通过链表来解决。当然还有其他的解决hash冲突的方法。hash这种数据结构是很常用的，比如我们系统使用HashMap来构建热点数据缓存，存取效率很好。</li><li>hash结构存数据首先通过计算key的hash值来确定其在数组中的位置，如果有冲突就在该数组位置建一个链表。这样很明显有几个问题：</li><li>即使是具有相同特征的key计算出来的位置可能相隔很远，连续查询效率低下。即<code>不支持范围查询</code>。</li><li>hash索引存储的是计算得到的hash值和行指针，而不存储具体的行值，所以通过hash索引查询数据需要进行两次查询(首先查询行的位置，然后找到具体的数据)</li><li>hash索引查询数据的前提就是计算hash值，也就是要求key为一个能准确指向一条数据的key，所以对于like等一类的匹配查询是不支持的。</li><li><strong>所以我们可以知道的是hash索引适用于快速选取某一行的数据，超级大表中定位某一行特别快。</strong></li><li><strong>只要是只需要做等值比较查询，而不包含排序或范围查询的需求，都适合使用哈希索引。</strong></li></ul><p>创建的语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> index_test <span class="token keyword">using</span> <span class="token keyword">hash</span> <span class="token keyword">on</span> test1<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你会发现创建了也没有用，因为InnoDB和myIsam都不支持hash索引。</p><p><strong>缺点</strong> </p><ul><li>需要维护hash值，可以手动维护，也可以使用触发器实现。</li><li>若数据表非常大的话，CRC32（）会出现大量hash冲突，则可以自己实现一个64位的hash函数，这个自定义的hash函数要返回整数而不是字符串，因为范围整数，对此效率更高。一个简单的办法就是使用MD5（）函数返回值的一部分来作为自定义的hash函数。但是这可能比自己写一个hash算法性能要差一些。</li></ul><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><h4 id="1）哪些情况下适合建索引"><a href="#1）哪些情况下适合建索引" class="headerlink" title="1）哪些情况下适合建索引"></a>1）哪些情况下适合建索引</h4><ol><li><p>频繁作为where条件语句查询的字段</p></li><li><p>关联字段需要建立索引，例如外键字段，student表中的classid, classes表中的schoolid 等</p></li><li><p>排序字段可以建立索引</p></li><li><p>分组字段可以建立索引，因为分组的前提是排序</p></li><li><p>统计字段可以建立索引，例如count(),max()</p></li></ol><h4 id="（2）哪些情况下不适合建索引"><a href="#（2）哪些情况下不适合建索引" class="headerlink" title="（2）哪些情况下不适合建索引"></a>（2）哪些情况下不适合建索引</h4><p>1.频繁更新的字段不适合建立索引</p><p>2.where条件中用不到的字段不适合建立索引</p><p>3.表数据可以确定比较少的不需要建索引</p><p>4.数据重复且发布比较均匀的的字段不适合建索引（唯一性太差的字段不适合建立索引），例如性别，真假值</p><p>假如索引列TYPE有5个键值，如果有1万条数据，那么 WHERE TYPE &#x3D; 1将访问表中的2000个数据块。再加上访问索引块，一共要访问大于200个的数据块。如果全表扫描，假设10条数据一个数据块，那么只需访问1000个数据块，既然全表扫描访问的数据块少一些，肯定就不会利用索引了。</p><ol start="5"><li>参与列计算的列不适合建索引，索引会失效</li></ol><h3 id="索引不会包含有NULL值的列"><a href="#索引不会包含有NULL值的列" class="headerlink" title="索引不会包含有NULL值的列"></a>索引不会包含有NULL值的列</h3><p>a.单列索引无法储null值，复合索引无法储全为null的值。</p><p>b.查询时，采用is null条件时，不能利用到索引，只能全表扫描。</p><p>为什么索引列无法存储Null值？</p><p>a.索引是有序的。NULL值进入索引时，无法确定其应该放在哪里。（将索引列值进行建树，其中必然涉及到诸多的比较操作，null 值是不确定值无法</p><p>比较，无法确定null出现在索引树的叶子节点位置。）</p><p>b.如果需要把空值存入索引，方法有二：其一，把NULL值转为一个特定的值，在WHERE中检索时，用该特定值查找。其二，建立一个复合索引。例如</p><p>create index ind_a on table(col1,1); 通过在复合索引中指定一个非空常量值，而使构成索引的列的组合中，不可能出现全空值。</p><h3 id="MySQL索引失效的几种情况"><a href="#MySQL索引失效的几种情况" class="headerlink" title="MySQL索引失效的几种情况"></a>MySQL索引失效的几种情况</h3><ul><li>如果条件中有or，即使其中有条件带索引也不会使用(这也是为什么尽量少用or的原因)要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引</li><li>复合索引不满足最左原则就不能使用索引</li><li>like查询以%开头</li><li>如果mysql估计使用全表扫描要比使用索引快,则不使用索引</li></ul><h3 id="MySQL主要提供2种方式的索引：B-Tree索引，Hash索引"><a href="#MySQL主要提供2种方式的索引：B-Tree索引，Hash索引" class="headerlink" title="MySQL主要提供2种方式的索引：B-Tree索引，Hash索引"></a>MySQL主要提供2种方式的索引：B-Tree索引，Hash索引</h3><ul><li>B树索引具有<strong>范围查找和前缀查找的能力</strong>，对于有N节点的B树，检索一条记录的复杂度为O(LogN)。相当于二分查找。</li><li>哈希索引只能做等于查找，但是无论多大的Hash表，查找复杂度都是O(1)。</li><li>显然，如果值的差异性大，并且以等值查找（&#x3D;、 &lt;、&gt;、in）为主，Hash索引是更高效的选择，它有O(1)的查找复杂度。</li><li>如果值的差异性相对较差，并且以范围查找为主，B树是更好的选择，它支持范围查找。</li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><ul><li>一个事务中，要么全部完成，要不全部失败</li><li>发生错误会回滚，会到事务前状态</li></ul><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。(<strong>比如：A向B转账，不可能A扣了钱，B却没有收到</strong>)</p><h3 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h3><ul><li>允许多个并发事务同时对其数据进行读写和修改的能力</li><li>隔离性可以防止多个事务并发执行时由于<strong>交叉执行而导致数据的不一致</strong></li><li>读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）</li></ul><h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3><p>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p><h3 id="隔离性级别"><a href="#隔离性级别" class="headerlink" title="隔离性级别"></a>隔离性级别</h3><table><thead><tr><th>脏读</th><th>不可重复读</th><th>幻读</th><th></th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable read</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h4 id="读未提交"><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h4><ul><li>事物A和事物B，事物A未提交的数据，事物B可以读取到</li><li>这里读取到的数据叫做“脏数据”，叫脏读</li><li>这种隔离级别最低，这种级别一般是在理论上存在，数据库隔离级别一般都高于该级别</li></ul><h4 id="读已提交"><a href="#读已提交" class="headerlink" title="读已提交"></a>读已提交</h4><p>能读到别的事物已经提交的数据。</p><p>A事务在本次事务中，对自己操作过的数据，进行了<strong>多次读取发现数据不一致</strong>，不可重复读。</p><p>简单点说就是不能让我好好的重复读，一个事务里读出来的数据都不一样，让不让人干活了。</p><h4 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h4><p>A事务在本次事务中对未操作的数据进行多次查询，发现第一次没有，第二次出现了就像幻觉一样。或者第一次有而第二次没有。针对delete和insert。</p><h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><ul><li>事务A和事务B，事务A在操作数据库时，事务B只能排队等待</li><li>这种隔离级别很少使用，吞吐量太低，用户体验差</li><li>这种级别可以避免“幻像读”，每一次读取的都是数据库中真实存在数据，事务A与事务B串行，而不并发。</li><li>别的地方一用这个数据就不能修改删除，直到别的地方提交</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/04/16/redis/"/>
      <url>/2022/04/16/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><ul><li>数据都在内存中，支持持久化，主要用作备份恢复</li><li>除了支持简单的key-value模式，还支持多种数据结构的存储，比如 list、set、hash、zset等。</li><li>一般是作为缓存数据库辅助持久化的数据库</li></ul><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><p>泛指非关系型的数据库</p><p>不保证数据的ACID性（原子性，一致性，隔离性，持久性）</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li><p>高并发（10w&#x2F;s）</p></li><li><p>海量数据读写</p></li><li><p>高扩展（不限制语言，lua脚本增强）</p></li><li><p>速度快</p></li></ul><h4 id="不适合"><a href="#不适合" class="headerlink" title="不适合"></a>不适合</h4><p>需要事务支持</p><p>基于sql的结构化查询，处理复杂关系（用户自定义条件查询）</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/jpg/image-20220415102704965.png" alt="image-20220415102704965"></h4><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>string字符串</li><li>list列表</li><li>set集合 <strong>（无序，值不可重复）</strong></li><li>hash表</li><li>zset有序集合 <strong>（不可重复，有序）</strong></li></ul><p><img src="/../jpg/image-20220415103026525.png" alt="image-20220415103026525"></p><h3 id="对位图-BitMaps"><a href="#对位图-BitMaps" class="headerlink" title="对位图 BitMaps"></a>对位图 BitMaps</h3><ul><li>针对位（计算机最小存储单位bit）操作，相较于String，Hash，Set更加节省空间</li><li>基于String结构，String最大512M，Bitmaps（2^32）</li><li>想象成以位为单位的数组，每个单元只能存储0或1，下标在Bitemaps中叫做偏移量offset</li></ul><p><img src="/../jpg/image-20220415104010916.png" alt="image-20220415104010916"></p><p>可以用作检验用户id登陆</p><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><p>​适合那种数据量很大，然后又没要求不能有一点误差的计算，HyperLogLog 提供不精确的去重计数方案，虽然不精确但是也不是非常不精确，标准误差是 0.81%，不过这对于页面用户访问量是没影响的，因为这种统计可能是访问量非常巨大，但是又没必要做到绝对准确，访问量对准确率要求没那么高，但是性能存储方面要求就比较高了，而HyperLogLog正好符合这种要求，不会占用太多存储空间，同时性能不错</p><p><img src="/../jpg/image-20220415104454766.png" alt="image-20220415104454766"></p><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>定期保存数据快照至一个rdb文件中</p><p>启动时自动加载rbd文件，恢复之前保存的数据</p><h4 id="SAVE-and-BGSAVE"><a href="#SAVE-and-BGSAVE" class="headerlink" title="SAVE and BGSAVE"></a>SAVE and BGSAVE</h4><p>SAVE 直接调用 rdbSave ，阻塞 Redis 主进程，直到保存完成为止。在主进程阻塞期间，服务器不能处理客户端的任何请求。</p><p>BGSAVE 则 fork 出一个子进程，子进程负责调用 rdbSave ，并在保存完成之后向主进程发送信号，通知保存已完成。 Redis 服务器在BGSAVE 执行期间仍然可以继续处理客户端的请求。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>性能影响小（Redis在保存RDB快照时会fork出子进程进行，几乎不影响Redis处理客户端请求的效率）</li><li>可靠的灾难恢复手段（每次快照会生成一个完整的数据快照文件，所以可以辅以其他手段保存多个时间点的快照）</li><li>数据恢复比AOF快</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>定期生成，会丢失一部分数据</li><li>如果数据集非常大且CPU不够强（比如单核CPU），Redis在fork子进程时可能会消耗相对较长的时间，影响Redis对外提供服务的能力</li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>采用AOF持久方式时，Redis会把每一个写请求都记录在一个日志文件里。在Redis重启时，会把AOF文件中记录的所有写操作顺序执行一遍，确保数据恢复到最新。</p><h4 id="AOF提供了三种fsync配置"><a href="#AOF提供了三种fsync配置" class="headerlink" title="AOF提供了三种fsync配置"></a>AOF提供了三种fsync配置</h4><p>always&#x2F;everysec&#x2F;no，通过配置项[appendfsync]指定：</p><ol><li><strong>appendfsync no</strong>：不进行fsync，将flush文件的时机交给OS决定，速度最快</li><li><strong>appendfsync always</strong>：每写入一条日志就进行一次fsync操作，数据安全性最高，但速度最慢</li><li><strong>appendfsync everysec</strong>：折中的做法，交由后台线程每秒fsync一次</li></ol><h4 id="AOF-rewrite"><a href="#AOF-rewrite" class="headerlink" title="AOF rewrite"></a>AOF rewrite</h4><p>可以重写AOF文件，只保留能够把数据恢复到最新状态的最小写操作集。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>最安全（在启用appendfsync为always时，任何已写入的数据都不会丢失，使用在启用appendfsync everysec也至多只会丢失1秒的数据）</li><li>轻松修复（AOF文件在发生断电等问题时也不会损坏，即使出现了某条日志只写入了一半的情况，也可以使用redis-check-aof工具轻松修复）</li><li>易读，可修改（在进行某些错误的数据清除操作后，只要AOF文件没有rewrite，就可以把AOF文件备份出来，把错误的命令删除，然后恢复数据）</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>AOF文件通常比PDB文件大</li><li>性能消耗高</li><li>数据恢复慢</li></ul><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><p><strong>一次性，顺序性，排他性的执行一个队列中的一系列命令</strong></p><ul><li><strong>Redis事务没有隔离级别的概念</strong></li></ul><p>批量操作在发送 EXEC 命令前被放入队列缓存，并不会被实际执行，也就不存在事务内的查询要看到事务里的更新，事务外查询不能看到。</p><ul><li><strong>Redis不保证原子性</strong></li></ul><p>Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。</p><p>一个事务从开始到执行会经历以下三个阶段：</p><ul><li>第一阶段：开始事务</li><li>第二阶段：命令入队</li><li>第三阶段：执行事务</li></ul><p>Redis事务相关命令：</p><ul><li>MULTI</li></ul><p>开启事务，redis会将后续的命令逐个放入队列中，然后使用EXEC命令来原子化执行这个命令队列</p><ul><li>EXEC</li></ul><p>执行事务中的所有操作命令</p><ul><li>DISCARD</li></ul><p>取消事务，放弃执行事务块中的所有命令</p><ul><li>WATCH</li></ul><p>监视一个或多个key，如果事务在执行前，这个key（或多个key）被其他命令修改，则事务被中断，不会执行事务中的任何命令</p><ul><li>UNWATCH</li></ul><p>取消WATCH对所有key的监视</p><h3 id="不支持事务回滚"><a href="#不支持事务回滚" class="headerlink" title="不支持事务回滚"></a>不支持事务回滚</h3><p>多数事务失败是由语法错误或者数据结构类型错误导致的，语法错误说明在命令入队前就进行检测的，而类型错误是在执行时检测的，Redis为提升性能而采用这种简单的事务，这是不同于关系型数据库的，特别要注意区分。Redis之所以保持这样简易的事务，完全是为了保证高并发下的核心问题——<strong>性能</strong>。</p><h2 id="数据删除与淘汰策略"><a href="#数据删除与淘汰策略" class="headerlink" title="数据删除与淘汰策略"></a>数据删除与淘汰策略</h2><h4 id="过期数据"><a href="#过期数据" class="headerlink" title="过期数据"></a>过期数据</h4><p>Redis是一种内存级数据库</p><p>所有数据均存放在内存中，内存中的数据可以通过TTL指令获取其状态</p><p>TTL返回的值有三种情况：正数，-1，-2</p><ul><li><strong>正数</strong>：代表该数据在内存中还能存活的时间</li><li><strong>-1</strong>：永久有效的数据</li><li>-<strong>2</strong> ：已经过期的数据 或被删除的数据 或 未定义的数据</li></ul><h5 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h5><p><img src="/image-20220415111456852.png" alt="image-20220415111456852"></p><h3 id="数据删除策略"><a href="#数据删除策略" class="headerlink" title="数据删除策略"></a>数据删除策略</h3><h4 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h4><p>创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作</p><ul><li><strong>优点</strong>：节约内存，到时就删除，快速释放掉不必要的内存占用</li><li><strong>缺点</strong>：CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量</li><li><strong>总结</strong>：用处理器性能换取存储空间（拿时间换空间）</li></ul><h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h4><p>数据到达过期时间，不做处理。等下次访问该数据时，我们需要判断</p><ol><li>如果未过期，返回数据</li><li>发现已过期，删除，返回不存在</li></ol><ul><li><strong>优点</strong>：节约CPU性能，发现必须删除的时候才删除</li><li><strong>缺点</strong>：内存压力很大，出现长期占用内存的数据</li><li><strong>总结</strong>：用存储空间换取处理器性能（拿时间换空间）</li></ul><h4 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h4><pre class="line-numbers language-md" data-language="md"><code class="language-md">如果key超时，删除key  如果一轮中删除的key的数量&gt;W*25%，循环该过程  如果一轮中删除的key的数量≤W*25%，检查下一个expires[*]，0-15循环  W取值&#x3D;ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP属性值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定期删除就是周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度</p><ul><li><strong>特点1</strong>：CPU性能占用设置有峰值，检测频度可自定义设置</li><li><strong>特点2</strong>：内存压力不是很大，长期占用内存的冷数据会被持续清理</li><li><strong>总结</strong>：周期性抽查存储空间（随机抽查，重点抽查）</li></ul><h4 id="策略对比"><a href="#策略对比" class="headerlink" title="策略对比"></a>策略对比</h4><p>1：定时删除：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">节约内存，无占用,不分时段占用CPU资源，频度高,拿时间换空间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2：惰性删除：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">内存占用严重延时执行，CPU利用率高拿空间换时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3：定期删除：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">内存定期随机清理每秒花费固定的CPU资源维护内存随机抽查，重点抽查<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="数据淘汰策略（逐出算法）"><a href="#数据淘汰策略（逐出算法）" class="headerlink" title="数据淘汰策略（逐出算法）***"></a>数据淘汰策略（逐出算法）***</h4><p>当新数据进入redis时，如果内存不足怎么办？在执行每一个命令前，会调用**freeMemoryIfNeeded()**检测内存是否充足。如果内存不满足新 加入数据的最低存储要求，redis要临时删除一些数据为当前指令清理存储空间。清理数据的策略称为逐出算法。</p><p>注意：逐出数据的过程不是100%能够清理出足够的可使用的内存空间，如果不成功则反复执行。</p><h5 id="策略配置"><a href="#策略配置" class="headerlink" title="策略配置"></a>策略配置</h5><p><strong>第一类</strong>：检测易失数据（可能会过期的数据集server.db[i].expires ） 同一个库</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">volatile-lru：挑选最近最少使用的数据淘汰</span> <span class="token attr-value">     least recently used</span><span class="token attr-name">volatile-lfu：挑选最近使用次数最少的数据淘汰</span> <span class="token attr-value">  least frequently used</span>volatile-ttl：挑选将要过期的数据淘汰volatile-random：任意选择数据淘汰<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二类</strong>：检测全库数据（所有数据集server.db[i].dict ）</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">allkeys-lru：挑选最近最少使用的数据淘汰allkeLyRs-lfu：：挑选最近使用次数最少的数据淘汰allkeys-random：任意选择数据淘汰，相当于随机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>第三类</strong>：放弃数据驱逐</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">no-enviction（驱逐）：禁止驱逐数据(redis4.0中默认策略)，会引发OOM(Out</span> <span class="token attr-value">Of Memory)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>​为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服务器上，连接在一起，并保证数据是同步的。即使有其中一台服务器宕机，其他服务器依然可以继续提供服务，实现Redis的高可用，同时实现数据冗余备份。</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li><p>高并发</p><blockquote><p>应用要提供某一业务要能支持很多客户端同时访问的能力，我们称为并发，高并发意思就很明确了</p></blockquote></li><li><p>高性能</p><blockquote><p>性能带给我们最直观的感受就是：速度快，时间短</p></blockquote></li><li><p>高可用</p></li></ul><p>​一年中应用服务正常运行的时间占全年时间的百分比，如下图：表示了应用服务在全年宕机的时间</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>提供数据方：<strong>master</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">写数据执行写操作时，将出现变化的数据自动同步到slave读数据（可忽略）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>主服务器，主节点，主库主客户端</p><ul><li><p>接收数据方：<strong>slave</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">读数据写数据（禁止）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>从服务器，从节点，从库</p><p>从客户端</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>读写分离：master写、slave读，提高服务器的读写负载能力</li><li>负载均衡：基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数 量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量</li><li>故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复</li><li>数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式</li><li>高可用基石：基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ul><li>建立连接阶段（准备阶段）</li><li>数据同步阶段</li><li>命令传播阶段（反复同步）</li></ul><h4 id="复制缓冲区"><a href="#复制缓冲区" class="headerlink" title="复制缓冲区"></a>复制缓冲区</h4><ul><li><p>偏移量</p><blockquote><p>概念：一个数字，描述复制缓冲区中的指令字节位置</p><p>分类：</p><ul><li>master复制偏移量：记录发送给所有slave的指令字节对应的位置（多个）</li><li>slave复制偏移量：记录slave接收master发送过来的指令字节对应的位置（一个）</li></ul><p>作用：同步信息，比对master与slave的差异，当slave断线后，恢复数据使用</p><p>数据来源：</p><ul><li>master端：发送一次记录一次</li><li>slave端：接收一次记录一次</li></ul></blockquote></li><li><p>字节值</p></li></ul><p>工作原理</p><ul><li>通过offset区分不同的slave当前数据传播的差异</li><li>master记录已发送的信息对应的offset</li><li>slave记录已接收的信息对应的offset</li></ul><h4 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h4><p>进入命令传播阶段候，master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线</p><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><p>​哨兵(sentinel) 是一个分布式系统，用于对主从结构中的每台服务器进行<strong>监控</strong>，当出现故障时通过<strong>投票</strong>机制<strong>选择</strong>新的master并将所有slave连接到新的master。</p><ul><li><p>监控：监控master和slave</p><p>不断的检查master和slave是否正常运行</p><p>master存活检测、master与slave运行情况检测</p></li><li><p>通知（提醒）：当被监控的服务器出现问题时，向其他（哨兵间，客户端）发送通知</p></li><li><p><strong>自动故障转移</strong>：断开master与slave连接，选取一个slave作为master，将其他slave连接新的master，并告知客户端新的服务器地址</p></li></ul><p>注意：哨兵也是一台redis服务器，只是不提供数据相关服务，通常哨兵的数量配置为单数</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>监控</li><li>通知</li><li>故障转移</li></ul><p>​在选举的时候每一个人手里都有一票，而每一个人的又都想当这个处理事故的人，那怎么办？大家就开始抢，于是每个人都会发出一个指令，在内网里边告诉大家我要当选举人，比如说现在的sentinel1和sentinel4发出这个选举指令了，那么sentinel2既能接到sentinel1的也能接到sentinel4的，接到了他们的申请以后呢，sentinel2他就会把他的一票投给其中一方，投给谁呢？谁先过来我投给谁，假设sentinel1先过来，所以这个票就给到了sentinel1。那么给过去以后呢，现在sentinel1就拿到了一票，按照这样的一种形式，最终会有一个选举结果。对应的选举最终得票多的，那自然就成为了处理事故的人。需要注意在这个过程中有可能会存在失败的现象，就是一轮选举完没有选取，那就会接着进行第二轮第三轮直到完成选举。</p><p>接下来就是由选举胜出的sentinel去从slave中选一个新的master出来的工作，这个流程是什么样的呢？</p><p>首先它有一个在服务器列表中挑选备选master的原则</p><ul><li><p>不在线的OUT</p></li><li><p>响应慢的OUT</p></li><li><p>与原master断开时间久的OUT</p></li><li><p>优先原则</p><p> 优先级  offset  runid</p></li></ul><p>选出新的master之后，发送指令（ sentinel ）给其他的slave：</p><ul><li>向新的master发送slaveof no one</li><li>向其他slave发送slaveof 新masterIP端口</li></ul><h4 id="故障转移阶段"><a href="#故障转移阶段" class="headerlink" title="故障转移阶段"></a>故障转移阶段</h4><ol><li>发现问题，主观下线与客观下线</li><li>竞选负责人</li><li>优选新master</li><li>新master上任，其他slave切换master，原master作为slave故障恢复后连接</li></ol><h2 id="Redis-cluster-集群"><a href="#Redis-cluster-集群" class="headerlink" title="Redis cluster 集群"></a>Redis cluster 集群</h2><p>集群就是使用网络将若干台计算机联通起来，并提供统一的管理方式，使其对外呈现单机的服务效果</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="/./jpg/image-20220415113802589.png" alt="image-20220415113802589"></h3><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><ul><li>分散单台服务器的访问压力，实现负载均衡</li><li>分散单台服务器的存储压力，实现可扩展性</li><li>降低单台服务器宕机带来的业务灾难</li></ul><h3 id="数据存储设计"><a href="#数据存储设计" class="headerlink" title="数据存储设计"></a>数据存储设计</h3><ol><li><p>通过算法设计，计算出key应该保存的位置</p></li><li><p>将所有的存储空间计划切割成16384份，每台主机保存一部分</p><p>注意：每份代表的是一个存储空间，不是一个key的保存空间</p></li><li><p>将key按照计算出的结果放到对应的存储空间</p></li></ol><h4 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h4><ul><li>各个数据库相互通信，保存各个库中槽的编号数据</li><li>一次命中，直接返回</li><li>一次未命中，告知具体位置</li></ul><h2 id="Redis高频面试题"><a href="#Redis高频面试题" class="headerlink" title="Redis高频面试题"></a>Redis高频面试题</h2><h3 id="1、缓存预热"><a href="#1、缓存预热" class="headerlink" title="1、缓存预热"></a>1、缓存预热</h3><p><strong>场景</strong>：“宕机”</p><p>服务器启动后迅速宕机</p><p><strong>问题排查</strong>：</p><p>1.请求数量较高，大量的请求过来之后都需要去从缓存中获取数据，但是缓存中又没有，此时从数据库中查找数据然后将数据再存入缓存，造成了短期内对redis的高强度操作从而导致问题</p><p>2.主从之间数据吞吐量较大，数据同步操作频度较高</p><p><strong>解决方案：</strong></p><ul><li>前置准备工作：</li></ul><p>1.日常例行统计数据访问记录，统计访问频度较高的热点数据</p><p>2.利用LRU数据删除策略，构建数据留存队列例如：storm与kafka配合</p><ul><li>准备工作：</li></ul><p>1.将统计结果中的数据分类，根据级别，redis优先加载级别较高的热点数据</p><p>2.利用分布式多服务器同时进行数据读取，提速数据加载过程</p><p>3.热点数据主从同时预热</p><ul><li>实施：</li></ul><p>4.使用脚本程序固定触发数据预热过程</p><p>5.如果条件允许，使用了CDN（内容分发网络），效果会更好</p><p><img src="/../jpg/image-20220302143005379.cea5929b.png" alt="image-20220302143005379"></p><p><strong>总的来说</strong>：缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><h3 id="2、缓存雪崩"><a href="#2、缓存雪崩" class="headerlink" title="2、缓存雪崩"></a>2、缓存雪崩</h3><p><strong>场景</strong>：数据库服务器崩溃，一连串的场景会随之儿来</p><p>1.系统平稳运行过程中，忽然数据库连接量激增</p><p>2.应用服务器无法及时处理请求</p><p>3.大量408，500错误页面出现</p><p>4.客户反复刷新页面获取数据</p><p>5.数据库崩溃</p><p>6.应用服务器崩溃</p><p>7.重启应用服务器无效</p><p>8.Redis服务器崩溃</p><p>9.Redis集群崩溃</p><p>10.重启数据库后再次被瞬间流量放倒</p><p><strong>问题排查</strong>：</p><p>1.在一个较短的时间内，缓存中较多的key集中过期</p><p>2.此周期内请求访问过期的数据，redis未命中，redis向数据库获取数据</p><p>3.数据库同时接收到大量的请求无法及时处理</p><p>4.Redis大量请求被积压，开始出现超时现象</p><p>5.数据库流量激增，数据库崩溃</p><p>6.重启后仍然面对缓存中无数据可用</p><p>7.Redis服务器资源被严重占用，Redis服务器崩溃</p><p>8.Redis集群呈现崩塌，集群瓦解</p><p>9.应用服务器无法及时得到数据响应请求，来自客户端的请求数量越来越多，应用服务器崩溃</p><p>10.应用服务器，redis，数据库全部重启，效果不理想</p><p>总而言之就两点：短时间范围内，大量key集中过期</p><p><img src="/./jpg/image-20220302143411228.d3a92dd4.png" alt="image-20220302143411228"></p><p><strong>解决方案</strong></p><ul><li>思路：</li></ul><p>1.更多的页面静态化处理</p><p>2.构建多级缓存架构</p><p> Nginx缓存+redis缓存+ehcache缓存</p><p>3.检测Mysql严重耗时业务进行优化</p><p> 对数据库的瓶颈排查：例如超时查询、耗时较高事务等</p><p>4.灾难预警机制</p><p> 监控redis服务器性能指标</p><p> CPU占用、CPU使用率</p><p> 内存容量</p><p> 查询平均响应时间</p><p> 线程数</p><p>5.限流、降级</p><p>短时间范围内牺牲一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐步放开访问</p><ul><li>落地实践：</li></ul><p>1.LRU与LFU切换</p><p>2.数据有效期策略调整</p><p> 根据业务数据有效期进行分类错峰，A类90分钟，B类80分钟，C类70分钟</p><p> 过期时间使用固定时间+随机值的形式，稀释集中到期的key的数量</p><p>3.超热数据使用永久key</p><p>4.定期维护（自动+人工）</p><p> 对即将过期数据做访问量分析，确认是否延时，配合访问量统计，做热点数据的延时</p><p>5.加锁：慎用！</p><p><strong>总的来说</strong>：缓存雪崩就是瞬间过期数据量太大，导致对数据库服务器造成压力。如能够有效避免过期时间集中，可以有效解决雪崩现象的 出现（约40%），配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整。</p><h3 id="3、缓存击穿"><a href="#3、缓存击穿" class="headerlink" title="3、缓存击穿"></a>3、缓存击穿</h3><p><strong>场景</strong>：还是数据库服务器崩溃，但是跟之前的场景有点不太一样</p><p>1.系统平稳运行过程中</p><p>2.数据库连接量瞬间激增</p><p>3.Redis服务器无大量key过期</p><p>4.Redis内存平稳，无波动</p><p>5.Redis服务器CPU正常</p><p>6.数据库崩溃</p><p><strong>问题排查：</strong></p><p>1.Redis中某个key过期，该key访问量巨大</p><p>2.多个数据请求从服务器直接压到Redis后，均未命中</p><p>3.Redis在短时间内发起了大量对数据库中同一数据的访问</p><p>总而言之就两点：单个key高热数据，key过期</p><p><img src="/./jpg/image-20220302143844340.5b35be0c.png" alt="image-20220302143844340"></p><p><strong>解决方案</strong>：</p><p>1.预先设定</p><p> 以电商为例，每个商家根据店铺等级，指定若干款主打商品，在购物节期间，加大此类信息key的过期时长 注意：购物节不仅仅指当天，以及后续若干天，访问峰值呈现逐渐降低的趋势</p><p>2.现场调整</p><p> 监控访问量，对自然流量激增的数据延长过期时间或设置为永久性key</p><p>3.后台刷新数据</p><p> 启动定时任务，高峰期来临之前，刷新数据有效期，确保不丢失</p><p>4.二级缓存</p><p> 设置不同的失效时间，保障不会被同时淘汰就行</p><p>5.加锁</p><p> 分布式锁，防止被击穿，但是要注意也是性能瓶颈，慎重！</p><p><strong>总的来说</strong>：缓存击穿就是单个高热数据过期的瞬间，数据访问量较大，未命中redis后，发起了大量对同一数据的数据库访问，导致对数 据库服务器造成压力。应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即时调整策略，毕竟单个key的过 期监控难度较高，配合雪崩处理策略即可。</p><h3 id="4、缓存穿透"><a href="#4、缓存穿透" class="headerlink" title="4、缓存穿透"></a>4、缓存穿透</h3><p><strong>场景</strong>：数据库服务器又崩溃了，跟之前的一样吗？</p><p>1.系统平稳运行过程中</p><p>2.应用服务器流量随时间增量较大</p><p>3.Redis服务器命中率随时间逐步降低</p><p>4.Redis内存平稳，内存无压力</p><p>5.Redis服务器CPU占用激增</p><p>6.数据库服务器压力激增</p><p>7.数据库崩溃</p><p><strong>问题排查：</strong></p><p>1.Redis中大面积出现未命中</p><p>2.出现非正常URL访问</p><p><img src="/./jpg/image-20220302144257762.f2b4b3f1.png" alt="image-20220302144257762"></p><p><strong>问题分析</strong>：</p><ul><li>获取的数据在数据库中也不存在，数据库查询未得到对应数据</li><li>Redis获取到null数据未进行持久化，直接返回</li><li>下次此类数据到达重复上述过程</li><li>出现黑客攻击服务器</li></ul><p><strong>解决方案</strong>：</p><p>1.缓存null</p><p> 对查询结果为null的数据进行缓存（长期使用，定期清理），设定短时限，例如30-60秒，最高5分钟</p><p>2.白名单策略</p><p> 提前预热各种分类数据id对应的bitmaps，id作为bitmaps的offset，相当于设置了数据白名单。当加载正常数据时放行，加载异常数据时直接拦截（效率偏低）</p><p> 使用布隆过滤器（有关布隆过滤器的命中问题对当前状况可以忽略）</p><p>2.实施监控</p><p> 实时监控redis命中率（业务正常范围时，通常会有一个波动值）与null数据的占比</p><p> 非活动时段波动：通常检测3-5倍，超过5倍纳入重点排查对象</p><p> 活动时段波动：通常检测10-50倍，超过50倍纳入重点排查对象</p><p> 根据倍数不同，启动不同的排查流程。然后使用黑名单进行防控（运营）</p><p>4.key加密</p><p> 问题出现后，临时启动防灾业务key，对key进行业务层传输加密服务，设定校验程序，过来的key校验</p><p> 例如每天随机分配60个加密串，挑选2到3个，混淆到页面数据id中，发现访问key不满足规则，驳回数据访问。</p><p><strong>总的来说</strong>：缓存击穿是指访问了不存在的数据，跳过了合法数据的redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力。通常此类数据的出现量是一个较低的值，当出现此类情况以毒攻毒，并及时报警。应对策略应该在临时预案防范方面多做文章。</p><p>无论是黑名单还是白名单，都是对整体系统的压力，警报解除后尽快移除。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/15/hello-world/"/>
      <url>/2022/04/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
