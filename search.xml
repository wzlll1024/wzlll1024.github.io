<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis</title>
      <link href="/2022/04/16/redis/"/>
      <url>/2022/04/16/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><ul><li>数据都在内存中，支持持久化，主要用作备份恢复</li><li>除了支持简单的key-value模式，还支持多种数据结构的存储，比如 list、set、hash、zset等。</li><li>一般是作为缓存数据库辅助持久化的数据库</li></ul><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><p>泛指非关系型的数据库</p><p>不保证数据的ACID性（原子性，一致性，隔离性，持久性）</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li><p>高并发（10w&#x2F;s）</p></li><li><p>海量数据读写</p></li><li><p>高扩展（不限制语言，lua脚本增强）</p></li><li><p>速度快</p></li></ul><h4 id="不适合"><a href="#不适合" class="headerlink" title="不适合"></a>不适合</h4><p>需要事务支持</p><p>基于sql的结构化查询，处理复杂关系（用户自定义条件查询）</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/jpg/image-20220415102704965.png" alt="image-20220415102704965"></h4><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>string字符串</li><li>list列表</li><li>set集合 <strong>（无序，值不可重复）</strong></li><li>hash表</li><li>zset有序集合 <strong>（不可重复，有序）</strong></li></ul><p><img src="/../jpg/image-20220415103026525.png" alt="image-20220415103026525"></p><h3 id="对位图-BitMaps"><a href="#对位图-BitMaps" class="headerlink" title="对位图 BitMaps"></a>对位图 BitMaps</h3><ul><li>针对位（计算机最小存储单位bit）操作，相较于String，Hash，Set更加节省空间</li><li>基于String结构，String最大512M，Bitmaps（2^32）</li><li>想象成以位为单位的数组，每个单元只能存储0或1，下标在Bitemaps中叫做偏移量offset</li></ul><p><img src="/../jpg/image-20220415104010916.png" alt="image-20220415104010916"></p><p>可以用作检验用户id登陆</p><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><p>​适合那种数据量很大，然后又没要求不能有一点误差的计算，HyperLogLog 提供不精确的去重计数方案，虽然不精确但是也不是非常不精确，标准误差是 0.81%，不过这对于页面用户访问量是没影响的，因为这种统计可能是访问量非常巨大，但是又没必要做到绝对准确，访问量对准确率要求没那么高，但是性能存储方面要求就比较高了，而HyperLogLog正好符合这种要求，不会占用太多存储空间，同时性能不错</p><p><img src="/../jpg/image-20220415104454766.png" alt="image-20220415104454766"></p><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>定期保存数据快照至一个rdb文件中</p><p>启动时自动加载rbd文件，恢复之前保存的数据</p><h4 id="SAVE-and-BGSAVE"><a href="#SAVE-and-BGSAVE" class="headerlink" title="SAVE and BGSAVE"></a>SAVE and BGSAVE</h4><p>SAVE 直接调用 rdbSave ，阻塞 Redis 主进程，直到保存完成为止。在主进程阻塞期间，服务器不能处理客户端的任何请求。</p><p>BGSAVE 则 fork 出一个子进程，子进程负责调用 rdbSave ，并在保存完成之后向主进程发送信号，通知保存已完成。 Redis 服务器在BGSAVE 执行期间仍然可以继续处理客户端的请求。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>性能影响小（Redis在保存RDB快照时会fork出子进程进行，几乎不影响Redis处理客户端请求的效率）</li><li>可靠的灾难恢复手段（每次快照会生成一个完整的数据快照文件，所以可以辅以其他手段保存多个时间点的快照）</li><li>数据恢复比AOF快</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>定期生成，会丢失一部分数据</li><li>如果数据集非常大且CPU不够强（比如单核CPU），Redis在fork子进程时可能会消耗相对较长的时间，影响Redis对外提供服务的能力</li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>采用AOF持久方式时，Redis会把每一个写请求都记录在一个日志文件里。在Redis重启时，会把AOF文件中记录的所有写操作顺序执行一遍，确保数据恢复到最新。</p><h4 id="AOF提供了三种fsync配置"><a href="#AOF提供了三种fsync配置" class="headerlink" title="AOF提供了三种fsync配置"></a>AOF提供了三种fsync配置</h4><p>always&#x2F;everysec&#x2F;no，通过配置项[appendfsync]指定：</p><ol><li><strong>appendfsync no</strong>：不进行fsync，将flush文件的时机交给OS决定，速度最快</li><li><strong>appendfsync always</strong>：每写入一条日志就进行一次fsync操作，数据安全性最高，但速度最慢</li><li><strong>appendfsync everysec</strong>：折中的做法，交由后台线程每秒fsync一次</li></ol><h4 id="AOF-rewrite"><a href="#AOF-rewrite" class="headerlink" title="AOF rewrite"></a>AOF rewrite</h4><p>可以重写AOF文件，只保留能够把数据恢复到最新状态的最小写操作集。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>最安全（在启用appendfsync为always时，任何已写入的数据都不会丢失，使用在启用appendfsync everysec也至多只会丢失1秒的数据）</li><li>轻松修复（AOF文件在发生断电等问题时也不会损坏，即使出现了某条日志只写入了一半的情况，也可以使用redis-check-aof工具轻松修复）</li><li>易读，可修改（在进行某些错误的数据清除操作后，只要AOF文件没有rewrite，就可以把AOF文件备份出来，把错误的命令删除，然后恢复数据）</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>AOF文件通常比PDB文件大</li><li>性能消耗高</li><li>数据恢复慢</li></ul><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><p><strong>一次性，顺序性，排他性的执行一个队列中的一系列命令</strong></p><ul><li><strong>Redis事务没有隔离级别的概念</strong></li></ul><p>批量操作在发送 EXEC 命令前被放入队列缓存，并不会被实际执行，也就不存在事务内的查询要看到事务里的更新，事务外查询不能看到。</p><ul><li><strong>Redis不保证原子性</strong></li></ul><p>Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。</p><p>一个事务从开始到执行会经历以下三个阶段：</p><ul><li>第一阶段：开始事务</li><li>第二阶段：命令入队</li><li>第三阶段：执行事务</li></ul><p>Redis事务相关命令：</p><ul><li>MULTI</li></ul><p>开启事务，redis会将后续的命令逐个放入队列中，然后使用EXEC命令来原子化执行这个命令队列</p><ul><li>EXEC</li></ul><p>执行事务中的所有操作命令</p><ul><li>DISCARD</li></ul><p>取消事务，放弃执行事务块中的所有命令</p><ul><li>WATCH</li></ul><p>监视一个或多个key，如果事务在执行前，这个key（或多个key）被其他命令修改，则事务被中断，不会执行事务中的任何命令</p><ul><li>UNWATCH</li></ul><p>取消WATCH对所有key的监视</p><h3 id="不支持事务回滚"><a href="#不支持事务回滚" class="headerlink" title="不支持事务回滚"></a>不支持事务回滚</h3><p>多数事务失败是由语法错误或者数据结构类型错误导致的，语法错误说明在命令入队前就进行检测的，而类型错误是在执行时检测的，Redis为提升性能而采用这种简单的事务，这是不同于关系型数据库的，特别要注意区分。Redis之所以保持这样简易的事务，完全是为了保证高并发下的核心问题——<strong>性能</strong>。</p><h2 id="数据删除与淘汰策略"><a href="#数据删除与淘汰策略" class="headerlink" title="数据删除与淘汰策略"></a>数据删除与淘汰策略</h2><h4 id="过期数据"><a href="#过期数据" class="headerlink" title="过期数据"></a>过期数据</h4><p>Redis是一种内存级数据库</p><p>所有数据均存放在内存中，内存中的数据可以通过TTL指令获取其状态</p><p>TTL返回的值有三种情况：正数，-1，-2</p><ul><li><strong>正数</strong>：代表该数据在内存中还能存活的时间</li><li><strong>-1</strong>：永久有效的数据</li><li>-<strong>2</strong> ：已经过期的数据 或被删除的数据 或 未定义的数据</li></ul><h5 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h5><p><img src="/image-20220415111456852.png" alt="image-20220415111456852"></p><h3 id="数据删除策略"><a href="#数据删除策略" class="headerlink" title="数据删除策略"></a>数据删除策略</h3><h4 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h4><p>创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作</p><ul><li><strong>优点</strong>：节约内存，到时就删除，快速释放掉不必要的内存占用</li><li><strong>缺点</strong>：CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量</li><li><strong>总结</strong>：用处理器性能换取存储空间（拿时间换空间）</li></ul><h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h4><p>数据到达过期时间，不做处理。等下次访问该数据时，我们需要判断</p><ol><li>如果未过期，返回数据</li><li>发现已过期，删除，返回不存在</li></ol><ul><li><strong>优点</strong>：节约CPU性能，发现必须删除的时候才删除</li><li><strong>缺点</strong>：内存压力很大，出现长期占用内存的数据</li><li><strong>总结</strong>：用存储空间换取处理器性能（拿时间换空间）</li></ul><h4 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h4><pre class="line-numbers language-md" data-language="md"><code class="language-md">如果key超时，删除key  如果一轮中删除的key的数量&gt;W*25%，循环该过程  如果一轮中删除的key的数量≤W*25%，检查下一个expires[*]，0-15循环  W取值&#x3D;ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP属性值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定期删除就是周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度</p><ul><li><strong>特点1</strong>：CPU性能占用设置有峰值，检测频度可自定义设置</li><li><strong>特点2</strong>：内存压力不是很大，长期占用内存的冷数据会被持续清理</li><li><strong>总结</strong>：周期性抽查存储空间（随机抽查，重点抽查）</li></ul><h4 id="策略对比"><a href="#策略对比" class="headerlink" title="策略对比"></a>策略对比</h4><p>1：定时删除：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">节约内存，无占用,不分时段占用CPU资源，频度高,拿时间换空间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2：惰性删除：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">内存占用严重延时执行，CPU利用率高拿空间换时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3：定期删除：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">内存定期随机清理每秒花费固定的CPU资源维护内存随机抽查，重点抽查<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="数据淘汰策略（逐出算法）"><a href="#数据淘汰策略（逐出算法）" class="headerlink" title="数据淘汰策略（逐出算法）***"></a>数据淘汰策略（逐出算法）***</h4><p>当新数据进入redis时，如果内存不足怎么办？在执行每一个命令前，会调用**freeMemoryIfNeeded()**检测内存是否充足。如果内存不满足新 加入数据的最低存储要求，redis要临时删除一些数据为当前指令清理存储空间。清理数据的策略称为逐出算法。</p><p>注意：逐出数据的过程不是100%能够清理出足够的可使用的内存空间，如果不成功则反复执行。</p><h5 id="策略配置"><a href="#策略配置" class="headerlink" title="策略配置"></a>策略配置</h5><p><strong>第一类</strong>：检测易失数据（可能会过期的数据集server.db[i].expires ） 同一个库</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">volatile-lru：挑选最近最少使用的数据淘汰</span> <span class="token attr-value">     least recently used</span><span class="token attr-name">volatile-lfu：挑选最近使用次数最少的数据淘汰</span> <span class="token attr-value">  least frequently used</span>volatile-ttl：挑选将要过期的数据淘汰volatile-random：任意选择数据淘汰<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二类</strong>：检测全库数据（所有数据集server.db[i].dict ）</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">allkeys-lru：挑选最近最少使用的数据淘汰allkeLyRs-lfu：：挑选最近使用次数最少的数据淘汰allkeys-random：任意选择数据淘汰，相当于随机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>第三类</strong>：放弃数据驱逐</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">no-enviction（驱逐）：禁止驱逐数据(redis4.0中默认策略)，会引发OOM(Out</span> <span class="token attr-value">Of Memory)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>​为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服务器上，连接在一起，并保证数据是同步的。即使有其中一台服务器宕机，其他服务器依然可以继续提供服务，实现Redis的高可用，同时实现数据冗余备份。</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li><p>高并发</p><blockquote><p>应用要提供某一业务要能支持很多客户端同时访问的能力，我们称为并发，高并发意思就很明确了</p></blockquote></li><li><p>高性能</p><blockquote><p>性能带给我们最直观的感受就是：速度快，时间短</p></blockquote></li><li><p>高可用</p></li></ul><p>​一年中应用服务正常运行的时间占全年时间的百分比，如下图：表示了应用服务在全年宕机的时间</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>提供数据方：<strong>master</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">写数据执行写操作时，将出现变化的数据自动同步到slave读数据（可忽略）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>主服务器，主节点，主库主客户端</p><ul><li><p>接收数据方：<strong>slave</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">读数据写数据（禁止）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>从服务器，从节点，从库</p><p>从客户端</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>读写分离：master写、slave读，提高服务器的读写负载能力</li><li>负载均衡：基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数 量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量</li><li>故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复</li><li>数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式</li><li>高可用基石：基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ul><li>建立连接阶段（准备阶段）</li><li>数据同步阶段</li><li>命令传播阶段（反复同步）</li></ul><h4 id="复制缓冲区"><a href="#复制缓冲区" class="headerlink" title="复制缓冲区"></a>复制缓冲区</h4><ul><li><p>偏移量</p><blockquote><p>概念：一个数字，描述复制缓冲区中的指令字节位置</p><p>分类：</p><ul><li>master复制偏移量：记录发送给所有slave的指令字节对应的位置（多个）</li><li>slave复制偏移量：记录slave接收master发送过来的指令字节对应的位置（一个）</li></ul><p>作用：同步信息，比对master与slave的差异，当slave断线后，恢复数据使用</p><p>数据来源：</p><ul><li>master端：发送一次记录一次</li><li>slave端：接收一次记录一次</li></ul></blockquote></li><li><p>字节值</p></li></ul><p>工作原理</p><ul><li>通过offset区分不同的slave当前数据传播的差异</li><li>master记录已发送的信息对应的offset</li><li>slave记录已接收的信息对应的offset</li></ul><h4 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h4><p>进入命令传播阶段候，master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线</p><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><p>​哨兵(sentinel) 是一个分布式系统，用于对主从结构中的每台服务器进行<strong>监控</strong>，当出现故障时通过<strong>投票</strong>机制<strong>选择</strong>新的master并将所有slave连接到新的master。</p><ul><li><p>监控：监控master和slave</p><p>不断的检查master和slave是否正常运行</p><p>master存活检测、master与slave运行情况检测</p></li><li><p>通知（提醒）：当被监控的服务器出现问题时，向其他（哨兵间，客户端）发送通知</p></li><li><p><strong>自动故障转移</strong>：断开master与slave连接，选取一个slave作为master，将其他slave连接新的master，并告知客户端新的服务器地址</p></li></ul><p>注意：哨兵也是一台redis服务器，只是不提供数据相关服务，通常哨兵的数量配置为单数</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>监控</li><li>通知</li><li>故障转移</li></ul><p>​在选举的时候每一个人手里都有一票，而每一个人的又都想当这个处理事故的人，那怎么办？大家就开始抢，于是每个人都会发出一个指令，在内网里边告诉大家我要当选举人，比如说现在的sentinel1和sentinel4发出这个选举指令了，那么sentinel2既能接到sentinel1的也能接到sentinel4的，接到了他们的申请以后呢，sentinel2他就会把他的一票投给其中一方，投给谁呢？谁先过来我投给谁，假设sentinel1先过来，所以这个票就给到了sentinel1。那么给过去以后呢，现在sentinel1就拿到了一票，按照这样的一种形式，最终会有一个选举结果。对应的选举最终得票多的，那自然就成为了处理事故的人。需要注意在这个过程中有可能会存在失败的现象，就是一轮选举完没有选取，那就会接着进行第二轮第三轮直到完成选举。</p><p>接下来就是由选举胜出的sentinel去从slave中选一个新的master出来的工作，这个流程是什么样的呢？</p><p>首先它有一个在服务器列表中挑选备选master的原则</p><ul><li><p>不在线的OUT</p></li><li><p>响应慢的OUT</p></li><li><p>与原master断开时间久的OUT</p></li><li><p>优先原则</p><p> 优先级  offset  runid</p></li></ul><p>选出新的master之后，发送指令（ sentinel ）给其他的slave：</p><ul><li>向新的master发送slaveof no one</li><li>向其他slave发送slaveof 新masterIP端口</li></ul><h4 id="故障转移阶段"><a href="#故障转移阶段" class="headerlink" title="故障转移阶段"></a>故障转移阶段</h4><ol><li>发现问题，主观下线与客观下线</li><li>竞选负责人</li><li>优选新master</li><li>新master上任，其他slave切换master，原master作为slave故障恢复后连接</li></ol><h2 id="Redis-cluster-集群"><a href="#Redis-cluster-集群" class="headerlink" title="Redis cluster 集群"></a>Redis cluster 集群</h2><p>集群就是使用网络将若干台计算机联通起来，并提供统一的管理方式，使其对外呈现单机的服务效果</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="/./jpg/image-20220415113802589.png" alt="image-20220415113802589"></h3><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><ul><li>分散单台服务器的访问压力，实现负载均衡</li><li>分散单台服务器的存储压力，实现可扩展性</li><li>降低单台服务器宕机带来的业务灾难</li></ul><h3 id="数据存储设计"><a href="#数据存储设计" class="headerlink" title="数据存储设计"></a>数据存储设计</h3><ol><li><p>通过算法设计，计算出key应该保存的位置</p></li><li><p>将所有的存储空间计划切割成16384份，每台主机保存一部分</p><p>注意：每份代表的是一个存储空间，不是一个key的保存空间</p></li><li><p>将key按照计算出的结果放到对应的存储空间</p></li></ol><h4 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h4><ul><li>各个数据库相互通信，保存各个库中槽的编号数据</li><li>一次命中，直接返回</li><li>一次未命中，告知具体位置</li></ul><h2 id="Redis高频面试题"><a href="#Redis高频面试题" class="headerlink" title="Redis高频面试题"></a>Redis高频面试题</h2><h3 id="1、缓存预热"><a href="#1、缓存预热" class="headerlink" title="1、缓存预热"></a>1、缓存预热</h3><p><strong>场景</strong>：“宕机”</p><p>服务器启动后迅速宕机</p><p><strong>问题排查</strong>：</p><p>1.请求数量较高，大量的请求过来之后都需要去从缓存中获取数据，但是缓存中又没有，此时从数据库中查找数据然后将数据再存入缓存，造成了短期内对redis的高强度操作从而导致问题</p><p>2.主从之间数据吞吐量较大，数据同步操作频度较高</p><p><strong>解决方案：</strong></p><ul><li>前置准备工作：</li></ul><p>1.日常例行统计数据访问记录，统计访问频度较高的热点数据</p><p>2.利用LRU数据删除策略，构建数据留存队列例如：storm与kafka配合</p><ul><li>准备工作：</li></ul><p>1.将统计结果中的数据分类，根据级别，redis优先加载级别较高的热点数据</p><p>2.利用分布式多服务器同时进行数据读取，提速数据加载过程</p><p>3.热点数据主从同时预热</p><ul><li>实施：</li></ul><p>4.使用脚本程序固定触发数据预热过程</p><p>5.如果条件允许，使用了CDN（内容分发网络），效果会更好</p><p><img src="/../jpg/image-20220302143005379.cea5929b.png" alt="image-20220302143005379"></p><p><strong>总的来说</strong>：缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><h3 id="2、缓存雪崩"><a href="#2、缓存雪崩" class="headerlink" title="2、缓存雪崩"></a>2、缓存雪崩</h3><p><strong>场景</strong>：数据库服务器崩溃，一连串的场景会随之儿来</p><p>1.系统平稳运行过程中，忽然数据库连接量激增</p><p>2.应用服务器无法及时处理请求</p><p>3.大量408，500错误页面出现</p><p>4.客户反复刷新页面获取数据</p><p>5.数据库崩溃</p><p>6.应用服务器崩溃</p><p>7.重启应用服务器无效</p><p>8.Redis服务器崩溃</p><p>9.Redis集群崩溃</p><p>10.重启数据库后再次被瞬间流量放倒</p><p><strong>问题排查</strong>：</p><p>1.在一个较短的时间内，缓存中较多的key集中过期</p><p>2.此周期内请求访问过期的数据，redis未命中，redis向数据库获取数据</p><p>3.数据库同时接收到大量的请求无法及时处理</p><p>4.Redis大量请求被积压，开始出现超时现象</p><p>5.数据库流量激增，数据库崩溃</p><p>6.重启后仍然面对缓存中无数据可用</p><p>7.Redis服务器资源被严重占用，Redis服务器崩溃</p><p>8.Redis集群呈现崩塌，集群瓦解</p><p>9.应用服务器无法及时得到数据响应请求，来自客户端的请求数量越来越多，应用服务器崩溃</p><p>10.应用服务器，redis，数据库全部重启，效果不理想</p><p>总而言之就两点：短时间范围内，大量key集中过期</p><p><img src="/./jpg/image-20220302143411228.d3a92dd4.png" alt="image-20220302143411228"></p><p><strong>解决方案</strong></p><ul><li>思路：</li></ul><p>1.更多的页面静态化处理</p><p>2.构建多级缓存架构</p><p> Nginx缓存+redis缓存+ehcache缓存</p><p>3.检测Mysql严重耗时业务进行优化</p><p> 对数据库的瓶颈排查：例如超时查询、耗时较高事务等</p><p>4.灾难预警机制</p><p> 监控redis服务器性能指标</p><p> CPU占用、CPU使用率</p><p> 内存容量</p><p> 查询平均响应时间</p><p> 线程数</p><p>5.限流、降级</p><p>短时间范围内牺牲一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐步放开访问</p><ul><li>落地实践：</li></ul><p>1.LRU与LFU切换</p><p>2.数据有效期策略调整</p><p> 根据业务数据有效期进行分类错峰，A类90分钟，B类80分钟，C类70分钟</p><p> 过期时间使用固定时间+随机值的形式，稀释集中到期的key的数量</p><p>3.超热数据使用永久key</p><p>4.定期维护（自动+人工）</p><p> 对即将过期数据做访问量分析，确认是否延时，配合访问量统计，做热点数据的延时</p><p>5.加锁：慎用！</p><p><strong>总的来说</strong>：缓存雪崩就是瞬间过期数据量太大，导致对数据库服务器造成压力。如能够有效避免过期时间集中，可以有效解决雪崩现象的 出现（约40%），配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整。</p><h3 id="3、缓存击穿"><a href="#3、缓存击穿" class="headerlink" title="3、缓存击穿"></a>3、缓存击穿</h3><p><strong>场景</strong>：还是数据库服务器崩溃，但是跟之前的场景有点不太一样</p><p>1.系统平稳运行过程中</p><p>2.数据库连接量瞬间激增</p><p>3.Redis服务器无大量key过期</p><p>4.Redis内存平稳，无波动</p><p>5.Redis服务器CPU正常</p><p>6.数据库崩溃</p><p><strong>问题排查：</strong></p><p>1.Redis中某个key过期，该key访问量巨大</p><p>2.多个数据请求从服务器直接压到Redis后，均未命中</p><p>3.Redis在短时间内发起了大量对数据库中同一数据的访问</p><p>总而言之就两点：单个key高热数据，key过期</p><p><img src="/./jpg/image-20220302143844340.5b35be0c.png" alt="image-20220302143844340"></p><p><strong>解决方案</strong>：</p><p>1.预先设定</p><p> 以电商为例，每个商家根据店铺等级，指定若干款主打商品，在购物节期间，加大此类信息key的过期时长 注意：购物节不仅仅指当天，以及后续若干天，访问峰值呈现逐渐降低的趋势</p><p>2.现场调整</p><p> 监控访问量，对自然流量激增的数据延长过期时间或设置为永久性key</p><p>3.后台刷新数据</p><p> 启动定时任务，高峰期来临之前，刷新数据有效期，确保不丢失</p><p>4.二级缓存</p><p> 设置不同的失效时间，保障不会被同时淘汰就行</p><p>5.加锁</p><p> 分布式锁，防止被击穿，但是要注意也是性能瓶颈，慎重！</p><p><strong>总的来说</strong>：缓存击穿就是单个高热数据过期的瞬间，数据访问量较大，未命中redis后，发起了大量对同一数据的数据库访问，导致对数 据库服务器造成压力。应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即时调整策略，毕竟单个key的过 期监控难度较高，配合雪崩处理策略即可。</p><h3 id="4、缓存穿透"><a href="#4、缓存穿透" class="headerlink" title="4、缓存穿透"></a>4、缓存穿透</h3><p><strong>场景</strong>：数据库服务器又崩溃了，跟之前的一样吗？</p><p>1.系统平稳运行过程中</p><p>2.应用服务器流量随时间增量较大</p><p>3.Redis服务器命中率随时间逐步降低</p><p>4.Redis内存平稳，内存无压力</p><p>5.Redis服务器CPU占用激增</p><p>6.数据库服务器压力激增</p><p>7.数据库崩溃</p><p><strong>问题排查：</strong></p><p>1.Redis中大面积出现未命中</p><p>2.出现非正常URL访问</p><p><img src="/./jpg/image-20220302144257762.f2b4b3f1.png" alt="image-20220302144257762"></p><p><strong>问题分析</strong>：</p><ul><li>获取的数据在数据库中也不存在，数据库查询未得到对应数据</li><li>Redis获取到null数据未进行持久化，直接返回</li><li>下次此类数据到达重复上述过程</li><li>出现黑客攻击服务器</li></ul><p><strong>解决方案</strong>：</p><p>1.缓存null</p><p> 对查询结果为null的数据进行缓存（长期使用，定期清理），设定短时限，例如30-60秒，最高5分钟</p><p>2.白名单策略</p><p> 提前预热各种分类数据id对应的bitmaps，id作为bitmaps的offset，相当于设置了数据白名单。当加载正常数据时放行，加载异常数据时直接拦截（效率偏低）</p><p> 使用布隆过滤器（有关布隆过滤器的命中问题对当前状况可以忽略）</p><p>2.实施监控</p><p> 实时监控redis命中率（业务正常范围时，通常会有一个波动值）与null数据的占比</p><p> 非活动时段波动：通常检测3-5倍，超过5倍纳入重点排查对象</p><p> 活动时段波动：通常检测10-50倍，超过50倍纳入重点排查对象</p><p> 根据倍数不同，启动不同的排查流程。然后使用黑名单进行防控（运营）</p><p>4.key加密</p><p> 问题出现后，临时启动防灾业务key，对key进行业务层传输加密服务，设定校验程序，过来的key校验</p><p> 例如每天随机分配60个加密串，挑选2到3个，混淆到页面数据id中，发现访问key不满足规则，驳回数据访问。</p><p><strong>总的来说</strong>：缓存击穿是指访问了不存在的数据，跳过了合法数据的redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力。通常此类数据的出现量是一个较低的值，当出现此类情况以毒攻毒，并及时报警。应对策略应该在临时预案防范方面多做文章。</p><p>无论是黑名单还是白名单，都是对整体系统的压力，警报解除后尽快移除。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/15/hello-world/"/>
      <url>/2022/04/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
